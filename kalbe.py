# -*- coding: utf-8 -*-
"""Kalbe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vpLV9_x0tJyQ9qPPSPQJyValNB-qsOiU

# DATA PREPROCESSING
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import re
import string
import matplotlib.pyplot as plt
import datetime as dt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA
from sklearn.cluster import KMeans

df1 = pd.read_csv("/content/Case Study - Customer.csv")
df1

df1[['CustomerID', 'Age', 'Gender', 'Marital Status', 'Income']] = df1['CustomerID;Age;Gender;Marital Status;Income'].str.split(';', expand=True)

df1.drop('CustomerID;Age;Gender;Marital Status;Income', axis=1, inplace=True)

print(df1)

df2 = pd.read_csv("/content/Case Study - Product.csv")
df2

df2[['ProductID', 'Product Name', 'Price']] = df2['ProductID;Product Name;Price'].str.split(';', expand=True)

df2.drop('ProductID;Product Name;Price', axis=1, inplace=True)

print(df2)

df3 = pd.read_csv("/content/Case Study - Store1.csv")
df3

z = df3[['Latitude', 'Longitude']]
z

df3 = df3.drop(z, axis=1)

df3

df3 = df3['StoreID;StoreName;GroupStore;Type'].apply(lambda x: x[:-2])

rows_to_select = [0, 1, 2, 3, 4, 5, 8, 11, 12, 13]
rows = [6, 7, 9, 10]

a = df3.iloc[rows_to_select].apply(lambda x: x[:-1])
b = df3.iloc[rows]

df3 = pd.concat([a, b])
df3

df3 = pd.concat([df3, z], axis=1)

df3

df3[['StoreID','StoreName','GroupStore','Type']] = df3['StoreID;StoreName;GroupStore;Type'].str.split(';', expand=True)
df3

df3.drop('StoreID;StoreName;GroupStore;Type', axis=1, inplace=True)
df3

df4 = pd.read_csv("/content/Case Study - Transaction.csv")
df4

df4[['TransactionID', 'CustomerID', 'Date', 'ProductID', 'Price', 'Qty', 'TotalAmount', 'StoreID']] = df4['TransactionID;CustomerID;Date;ProductID;Price;Qty;TotalAmount;StoreID'].str.split(';', expand=True)

df4.drop('TransactionID;CustomerID;Date;ProductID;Price;Qty;TotalAmount;StoreID', axis=1, inplace=True)

print(df4)

df5 = pd.merge(df4, df1, on='CustomerID', how='inner')
df5

df6 = pd.merge(df5, df2, on='ProductID', how='inner')
df6

df7 = pd.merge(df6, df3, on='StoreID', how='inner')
df7

"""# Question 1 : Berapa rata-rata umur customer jika dilihat dari marital statusnya ?

"""

que1 = df7.loc[(df7['Marital Status'] == 'Married')]
quee1 = que1[['Marital Status', 'Age']].copy()
print(quee1)

quee1['Age'] = pd.to_numeric(quee1['Age'])

Married = quee1['Age'].mean()
Married

que11 = df7.loc[(df7['Marital Status'] == 'Single')]
quee11 = que11[['Marital Status', 'Age']].copy()
print(quee11)

quee11['Age'] = pd.to_numeric(quee11['Age'])

Single = quee11['Age'].mean()
Single

round(Single)

round(Married)

"""Average age for Single  : 30 years old

Average age for Married : 43 years old

# Question 2 : Berapa rata-rata umur customer jika dilihat dari gender nya ?
"""

que2 = df7.loc[(df7['Gender'] == '1')]
quee2 = que2[['Gender', 'Age']].copy()
print(quee2)

quee2['Age'] = pd.to_numeric(quee2['Age'])

Pria = quee2['Age'].mean()
Pria

que22 = df7.loc[(df7['Gender'] == '0')]
quee22 = que22[['Gender', 'Age']].copy()
print(quee22)

quee22['Age'] = pd.to_numeric(quee22['Age'])

Wanita = quee22['Age'].mean()
Wanita

round(Pria)

round(Wanita)

"""Average age for Men  : 40 years old

Average age for Women : 40 years old

# Question 3 : Tentukan nama store dengan total quantity terbanyak!
"""

df7['Qty'] = pd.to_numeric(df7['Qty'])

toko = df7.nlargest(1, 'Qty')
toko[['StoreName', 'Qty']]

"""The store with the highest total quantity is named **Prestasi Utama** with 10 Quantity

# Question 4 : Tentukan nama produk terlaris dengan total amount terbanyak
"""

df7['TotalAmount'] = pd.to_numeric(df7['TotalAmount'])

laris = df7.nlargest(1, 'TotalAmount')
laris[['Product Name','Qty' , 'TotalAmount']]

"""The best-selling product with the highest total amount is named **Choco Bar**

# Machine Learning (Regression) Time Series
"""

df7['Date'] = pd.to_datetime(df7['Date'])


df7 = df7.sort_values(by='Date')


df7['year'] = df7['Date'].dt.year
df7['month'] = df7['Date'].dt.month
df7['day'] = df7['Date'].dt.day

daily_data = df7.groupby('Date')['Qty'].sum().reset_index()

data = daily_data.set_index('Date')
data2 = data.resample('D').sum()

train_size = int(len(data2) * 0.8)
train_data, test_data = data2[:train_size], data2[train_size:]

print(train_data.shape, test_data.shape)

plt.figure(figsize=(12, 5))
sns.lineplot(data=train_data, x=train_data.index, y=train_data['Qty'])
sns.lineplot(data=test_data, x=test_data.index, y=test_data['Qty'])
plt.show()

p, d, q = 2, 2, 2
model = ARIMA(train_data, order=(p, d, q))
model_fit = model.fit()


start_idx = len(train_data)
end_idx = len(train_data) + len(test_data) - 1
predictions = model_fit.predict(start=start_idx, end=end_idx, dynamic=False)

mse = mean_squared_error(test_data, predictions)
print(f"Mean Squared Error: {mse}")

plt.figure(figsize=(12, 5))
plt.plot(test_data, label='Qty')
plt.plot(predictions, color='red', linestyle='-', label='Predicted')
plt.legend()
plt.show()

"""# Machine Learning (Clustering)"""

aggregated = df7.groupby('CustomerID').agg({
'TransactionID' : 'count',
'Qty' : 'sum',
'TotalAmount' : 'sum'
}).reset_index()

X = aggregated [['TransactionID', 'Qty', 'TotalAmount']]

num_clusters = 3


kmeans = KMeans(n_clusters=num_clusters, random_state=0)


kmeans.fit(X)


aggregated['Cluster'] = kmeans.labels_

print(aggregated.head())

cluster_centers = kmeans.cluster_centers_
print("Cluster Centers:")
print(cluster_centers)

plt.figure(figsize=(10, 6))
plt.scatter(
    X['Qty'],
    X['TotalAmount'],
    c=aggregated['Cluster'],
    cmap='rainbow',
    marker='o',
    alpha=0.5,
)
plt.xlabel('TransactionID')
plt.ylabel('TotalAmount')
plt.title('K-means Clustering')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.show()

wcss = []


for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)


plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='-', color='b')
plt.title('WCSS vs Number of Clusters')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within-Cluster-Sum-of-Squares (WCSS)')
plt.grid(True)
plt.show()

model1 = KMeans(n_clusters=4, init = 'k-means++',n_init=10, max_iter=300, tol=0.0001, random_state=100)
model1.fit(X)
labels1=model1.labels_
centroids1 = model1.cluster_centers_

df_cluster = aggregated.drop(columns = ['CustomerID'])
df_cluster.head()

plt.figure(figsize=(6,6))
sns.pairplot(data=df_cluster,hue='Cluster',palette='Set1')
plt.show()

df7.to_csv('final.csv', index=False)